import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import (
    roc_curve,
    auc,
    accuracy_score,
    classification_report,
    confusion_matrix
)

# === 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
df = pd.read_csv("results_entropy.csv")

# === 2. –î–æ–±–∞–≤–∏–º –±–∏–Ω–∞—Ä–Ω—É—é –º–µ—Ç–∫—É: fake=1, real=0 ===
df["binary_label"] = df["label"].apply(lambda x: 1 if x == "fake" else 0)

# === 3. –ù–∞–π–¥—ë–º –ª—É—á—à–∏–π –ø–æ—Ä–æ–≥ –ø–æ Youden's J (–º–∞–∫—Å. TPR - FPR) ===
fpr, tpr, thresholds = roc_curve(df["binary_label"], df["prob_fake"])
j_scores = tpr - fpr
j_best_idx = np.argmax(j_scores)
best_threshold = thresholds[j_best_idx]
acc_best = accuracy_score(df["binary_label"], df["prob_fake"] >= best_threshold)

print(f"üîç –õ—É—á—à–∏–π –ø–æ—Ä–æ–≥ –ø–æ Youden J: {best_threshold:.3f}")
print(f"üéØ Accuracy @ best threshold: {acc_best:.3f}\n")

# === 4. –°—Ç—Ä–æ–∏–º ROC-–∫—Ä–∏–≤—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª–∞—Å—Å—É ===
classes = ['real_phone', 'real_net', 'fake']
colors = ['green', 'orange', 'red']

plt.figure(figsize=(10, 6))
for cls, color in zip(classes, colors):
    # –¶–µ–ª–µ–≤–∞—è –º–µ—Ç–∫–∞: –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∫–ª–∞—Å—Å—É
    y_true = (df["label"] == cls).astype(int)

    # –ß—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ "–æ—Ü–µ–Ω–∫—É —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"?
    # –î–ª—è fake ‚Äî —á–µ–º –≤—ã—à–µ prob_fake, —Ç–µ–º –ª—É—á—à–µ
    # –î–ª—è real ‚Äî —á–µ–º –Ω–∏–∂–µ prob_fake, —Ç–µ–º –ª—É—á—à–µ (=> –∏—Å–ø–æ–ª—å–∑—É–µ–º 1 - prob_fake)
    if cls == 'fake':
        y_score = df['prob_fake']
    else:
        y_score = 1 - df['prob_fake']  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—ã—Ç—å real

    fpr, tpr, _ = roc_curve(y_true, y_score)
    roc_auc = auc(fpr, tpr)

    plt.plot(fpr, tpr, color=color, lw=2,
             label=f"{cls} (AUC = {roc_auc:.2f})")

plt.plot([0, 1], [0, 1], "k--", lw=1)
plt.title("ROC-–∫—Ä–∏–≤—ã–µ –ø–æ –∫–ª–∞—Å—Å–∞–º: —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–∞—Ç—å –∫–ª–∞—Å—Å—ã")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.grid(True)
plt.legend(loc="lower right")
plt.tight_layout()
plt.show()

# === 5. –ú—É–ª—å—Ç–∏–∫–ª–∞—Å—Å–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è ===

# –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ best_threshold:
# prob_fake >= threshold ‚Üí fake (2)
# prob_fake < threshold ‚Üí real
# —Å—Ä–µ–¥–∏ real –ø–æ–ø—Ä–æ–±—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ —É—Ä–æ–≤–Ω—é prob_fake
# (–Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ ‚Äî phone, –≤—ã—à–µ ‚Äî net)

# Step 1: –±–∏–Ω–∞—Ä–Ω–æ
df["pred_binary"] = (df["prob_fake"] >= best_threshold).astype(int)

# Step 2: –º—É–ª—å—Ç–∏–∫–ª–∞—Å—Å
# –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é real ‚Üí 0
df["pred_multi"] = 0  # real_phone
real_mask = df["pred_binary"] == 0
df.loc[real_mask & (df["prob_fake"] >= 0.25), "pred_multi"] = 1  # real_net
df.loc[df["pred_binary"] == 1, "pred_multi"] = 2  # fake

# –ò—Å—Ç–∏–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
label_map = {"real_phone": 0, "real_net": 1, "fake": 2}
df["true_multi"] = df["label"].map(label_map)

# === 6. –í—ã–≤–æ–¥ –æ—Ç—á—ë—Ç–∞ ===
print("üìã Classification Report (–ú—É–ª—å—Ç–∏–∫–ª–∞—Å—Å):")
print(classification_report(df["true_multi"], df["pred_multi"],
                            target_names=["real_phone", "real_net", "fake"]))

print("üîÅ Confusion Matrix:")
print(confusion_matrix(df["true_multi"], df["pred_multi"]))
